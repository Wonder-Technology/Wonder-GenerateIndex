// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Fs          = require("fs");
var Path        = require("path");
var Sinon       = require("wonder-bs-sinon/lib/js/src/sinon.js");
var Sinon$1     = require("sinon");
var Process     = require("process");
var Generate    = require("../../src/Generate.js");
var Wonder_jest = require("wonder-bs-jest/lib/js/src/wonder_jest.js");

describe("generate index reason file", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var destFilePath = [""];
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                return /* () */0;
              }));
        afterEach((function () {
                if (Fs.existsSync(destFilePath[0])) {
                  Fs.unlinkSync(destFilePath[0]);
                  return /* () */0;
                } else {
                  return /* () */0;
                }
              }));
        return Wonder_jest.test("test index file", (function () {
                      destFilePath[0] = Path.join(Process.cwd(), "test/res/Index.re");
                      var rootDir = Path.join(Process.cwd(), "test/res");
                      var sourceFileGlobArr = /* array */[
                        "*.re",
                        "api/*.re"
                      ];
                      var config = {
                        exclude: /* array */["System.re"]
                      };
                      Generate.generate("/", rootDir, sourceFileGlobArr, "./test/res/", config);
                      return Wonder_jest.Expect[/* toContainString */11]("let minus_2 = Test2.minus_2;\n\nlet minus = Test2.minus;\n\nlet v2 = Test2.v2;\n\nlet constant1 = Test1.constant1;\n\nlet add1 = Test1.add1;\n\nlet func1 = Test1.func1;\n\nlet v1 = Test1.v1;")(Wonder_jest.Expect[/* expect */0](Fs.readFileSync(destFilePath[0], "utf8")));
                    }));
      }));

/*  Not a pure module */
